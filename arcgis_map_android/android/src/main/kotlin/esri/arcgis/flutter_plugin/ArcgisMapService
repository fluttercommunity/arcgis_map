package esri.arcgis.flutter_plugin

import com.esri.arcgisruntime.concurrent.Job
import com.esri.arcgisruntime.tasks.vectortilecache.ExportVectorTilesJob
import com.esri.arcgisruntime.tasks.vectortilecache.ExportVectorTilesTask
import esri.arcgis.flutter_plugin.util.ExportVectorTilesParametersParser
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel

class ArcgisMapService(binaryMessenger: BinaryMessenger) :
    MethodChannel.MethodCallHandler {
    private var exportVectorTilesTask = mutableListOf<ExportVectorTilesTask>()
    private var exportVectorTilesJobs = mutableListOf<ExportVectorTilesJob>()
    private var methodChannel: MethodChannel =
        MethodChannel(binaryMessenger, "esri.arcgis.flutter_plugin")

    init {
        methodChannel.setMethodCallHandler(this)
    }

    override fun onMethodCall(call: MethodCall, result: MethodChannel.Result) {
        val arguments = call.arguments as Map<String, Any>

        when (call.method) {
            "create_export_vector_tiles_task" -> onCreateExportVectorTilesTask(arguments, result)
            "start_export_vector_tiles_task_job" -> onStartExportVectorTilesTaskJob(
                arguments,
                result
            )
        }
    }


    private fun onCreateExportVectorTilesTask(
        arguments: Map<String, Any>,
        result: MethodChannel.Result
    ) {
        val url = arguments["url"] as String
        val exportTask = ExportVectorTilesTask(url)
        exportVectorTilesTask.add(exportTask)
        result.success(exportTask.hashCode())
    }

    private fun onStartExportVectorTilesTaskJob(
        arguments: Map<String, Any>,
        result: MethodChannel.Result
    ) {
        val referenceHashCode = arguments["referenceHashCode"] as Int
        val parameters = ExportVectorTilesParametersParser
            .parse(arguments["exportVectorTilesParameters"] as Map<String, Any>)
        val vectorTileCachePath = arguments["vectorTileCachePath"] as String
        val task = exportVectorTilesTask.first { it.hashCode() == referenceHashCode }
        val job = task.exportVectorTiles(parameters, vectorTileCachePath)
        exportVectorTilesJobs.add(job)
        job.addProgressChangedListener {
            methodChannel.invokeMethod(
                "export_vector_tiles_job_progress",
                mapOf("referenceHashCode" to task.hashCode(), "progress" to job.progress)
            )
        }
        job.addProgressChangedListener {
            when (job.status) {
                Job.Status.FAILED -> {
                    result.error(
                        job.error.errorCode.toString(),
                        job.error.message,
                        job.error.additionalMessage
                    )
                }
                Job.Status.SUCCEEDED -> {
                    result.success(null)
                }
                else -> {}
            }
        }
        job.start()
    }

    fun disposeExportVectorTileJobs() {
        exportVectorTilesJobs.forEach {
            it.cancel()
        }
    }
}