(self.webpackChunkarcgis_webpack01=self.webpackChunkarcgis_webpack01||[]).push([[791],{20791:(e,t,a)=>{"use strict";a.r(t),a.d(t,{applyEdits:()=>p,isEditableLayer:()=>u});var r=a(82550),s=a(59472),d=a(32656),i=a(10923),l=a(28293),n=a(15988),o=a(91535);function u(e){var t,a;return!0===(null==e||null==(t=e.capabilities)||null==(a=t.operations)?void 0:a.supportsEditing)&&e&&(!("editingEnabled"in e)||e.editingEnabled)}async function p(e,t,a,i){let n,u;const p={edits:a,result:new Promise(((e,t)=>{n=e,u=t}))};e.emit("apply-edits",p);try{const{results:u,edits:p}=await async function(e,t,a,r){if(await e.load(),!function(e){return e&&null!=e.applyEdits}(t))return Promise.reject(new d.Z(`${e.type}-layer:no-editing-support`,"Layer source does not support applyEdits capability",{layer:e}));if(!e.editingEnabled)throw new d.Z(`${e.type}-layer:editing-disabled`,"Editing is disabled for layer",{layer:e});const i=await function(e,t,a){const r=t&&(t.addFeatures||t.updateFeatures||t.deleteFeatures),i=t&&(t.addAttachments||t.updateAttachments||t.deleteAttachments);if(!t||!r&&!i)throw new d.Z(`${e.type}-layer:missing-parameters`,"'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");if(!e.capabilities.data.isVersioned&&a&&a.gdbVersion)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");if(!e.capabilities.editing.supportsRollbackOnFailure&&a&&a.rollbackOnFailureEnabled)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");if(!e.capabilities.editing.supportsGlobalId&&a&&a.globalIdUsed)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");if(!e.capabilities.editing.supportsGlobalId&&i)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");if((!a||!a.globalIdUsed)&&i)throw new d.Z(`${e.type}-layer:invalid-parameter`,"When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");const n={...t};if(n.addFeatures=t&&l.Z.isCollection(t.addFeatures)?t.addFeatures.toArray():n.addFeatures||[],n.updateFeatures=t&&l.Z.isCollection(t.updateFeatures)?t.updateFeatures.toArray():n.updateFeatures||[],n.deleteFeatures=t&&l.Z.isCollection(t.deleteFeatures)?t.deleteFeatures.toArray():n.deleteFeatures||[],n.addFeatures.length&&!e.capabilities.operations.supportsAdd)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support adding features.");if(n.updateFeatures.length&&!e.capabilities.operations.supportsUpdate)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support updating features.");if(n.deleteFeatures.length&&!e.capabilities.operations.supportsDelete)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support deleting features.");n.addAttachments=n.addAttachments||[],n.updateAttachments=n.updateAttachments||[],n.deleteAttachments=n.deleteAttachments||[],n.addFeatures=n.addFeatures.map(m),n.updateFeatures=n.updateFeatures.map(m);const u=a&&a.globalIdUsed;return n.addFeatures.forEach((t=>function(e,t,a){h(e,t,a)}(t,e,u))),n.updateFeatures.forEach((t=>function(e,t,a){if(h(e,t,a),"geometry"in e&&(0,s.pC)(e.geometry)&&!t.capabilities.editing.supportsGeometryUpdate)throw new d.Z(`${t.type}-layer:unsupported-operation`,"Layer does not support geometry updates.")}(t,e,u))),n.deleteFeatures.forEach((t=>function(e,t,a){h(e,t,a)}(t,e,u))),n.addAttachments.forEach((t=>c(t,e))),n.updateAttachments.forEach((t=>c(t,e))),async function(e){const t=e.addFeatures,a=e.updateFeatures,r=t.concat(a).map((e=>e.geometry)),s=await(0,o.aX)(r),d=t.length,i=a.length;return s.slice(0,d).forEach(((t,a)=>{e.addFeatures[a].geometry=t})),s.slice(d,d+i).forEach(((t,a)=>{e.updateFeatures[a].geometry=t})),e}(n)}(e,a,r);return i.addFeatures.length||i.updateFeatures.length||i.deleteFeatures.length||i.addAttachments.length||i.updateAttachments.length||i.deleteAttachments.length?{edits:i,results:await t.applyEdits(i,r)}:{edits:i,results:{addFeatureResults:[],updateFeatureResults:[],deleteFeatureResults:[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}}(e,t,a,i),y=e=>e.filter((e=>!e.error)).map(r.d9),g={edits:p,addedFeatures:y(u.addFeatureResults),updatedFeatures:y(u.updateFeatureResults),deletedFeatures:y(u.deleteFeatureResults),addedAttachments:y(u.addAttachmentResults),updatedAttachments:y(u.updateAttachmentResults),deletedAttachments:y(u.deleteAttachmentResults)};return(g.addedFeatures.length||g.updatedFeatures.length||g.deletedFeatures.length||g.addedAttachments.length||g.updatedAttachments.length||g.deletedAttachments.length)&&e.emit("edits",g),n(g),u}catch(e){throw u(e),e}}function h(e,t,a){if(a){if("attributes"in e&&!e.attributes[t.globalIdField])throw new d.Z(`${t.type}-layer:invalid-parameter`,"Feature should have 'globalId' when 'globalIdUsed' is true");if(!("attributes"in e)&&!e.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"'globalId' of the feature should be passed when 'globalIdUsed' is true")}if("geometry"in e&&(0,s.pC)(e.geometry)){if(e.geometry.hasZ&&!1===t.capabilities.data.supportsZ)throw new d.Z(`${t.type}-layer:z-unsupported`,"Layer does not support z values while feature has z values.");if(e.geometry.hasM&&!1===t.capabilities.data.supportsM)throw new d.Z(`${t.type}-layer:m-unsupported`,"Layer does not support m values while feature has m values.")}}function c(e,t){const{feature:a,attachment:r}=e;if(!a||"attributes"in a&&!a.attributes[t.globalIdField])throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to a feature with 'globalId'");if(!("attributes"in a)&&!a.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to 'globalId' of the parent feature");if(!r.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'globalId'");if(!r.data&&!r.uploadId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'data' or 'uploadId'");if(!(r.data instanceof File&&r.data.name||r.name))throw new d.Z(`${t.type}-layer:invalid-parameter`,"'name' is required when attachment is specified as Base64 encoded string using 'data'");if(!t.capabilities.editing.supportsUploadWithItemId&&r.uploadId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");if("string"==typeof r.data){const e=(0,i.sJ)(r.data);if(e&&!e.isBase64)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment 'data' should be a Blob, File or Base64 encoded string")}}function m(e){const t=new n.Z;return e.attributes||(e.attributes={}),t.geometry=e.geometry,t.attributes=e.attributes,t}}}]);