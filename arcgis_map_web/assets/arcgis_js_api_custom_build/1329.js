"use strict";(self.webpackChunkarcgis_webpack01=self.webpackChunkarcgis_webpack01||[]).push([[1329],{16984:(t,e,i)=>{i.d(e,{Z:()=>g});var s,n=i(36663),l=i(70375),r=i(82064),o=i(67134),a=i(13802),h=i(61681),c=i(81977),f=i(69236),u=i(40266);class p{constructor(t=null,e=null,i=null){this.minValue=t,this.maxValue=e,this.noDataValue=i}}let x=s=class extends r.wq{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.statistics=null}static createEmptyBand(t,e){return new(s.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new l.Z("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new p)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if((0,h.pC)(t))for(let i=0;i<t.length;i++)t[i]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[i,n]=e,l=this.pixels,r=this.width*this.height,o=l.length;let a,h,c;const f=[];for(let e=0;e<o;e++){c=s.createEmptyBand(t,r),a=l[e];for(let t=0;t<r;t++)h=a[t],c[t]=h>n?n:h<i?i:h;f.push(c)}this.pixels=f,this.pixelType=t}extractBands(t){const{pixels:e,statistics:i}=this;if((0,h.Wi)(t)||0===t.length||!e||0===e.length)return this;const n=e.length,l=t.some((t=>t>=e.length)),r=n===t.length&&!t.some(((t,e)=>t!==e));return l||r?this:new s({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>e[t])),statistics:i&&t.map((t=>i[t]))})}clone(){const t=new s({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;(0,h.pC)(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=s.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const s=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=s?this.pixels[e].slice(0,this.pixels[e].length):new i(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,o.d9)(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:i,pixels:s}=this;if(!t||!s||!s.length)return void a.Z.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,l,r,o;n=l=r=s[0],s.length>=3?(l=s[1],r=s[2]):2===s.length&&(l=s[1]);const c=new Uint32Array(t),f=this.width*this.height;if(n.length===f)if((0,h.pC)(e)&&e.length===f)if(i)for(o=0;o<f;o++)e[o]&&(c[o]=e[o]<<24|r[o]<<16|l[o]<<8|n[o]);else for(o=0;o<f;o++)e[o]&&(c[o]=255<<24|r[o]<<16|l[o]<<8|n[o]);else for(o=0;o<f;o++)c[o]=255<<24|r[o]<<16|l[o]<<8|n[o];else a.Z.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:i,statistics:s}=this;if(!t||!e||!e.length)return void a.Z.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const n=this.pixelType;let l=1,r=0,o=1;if(s&&s.length>0){for(const t of s)if(null!=t.minValue&&(r=Math.min(r,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;o=Math.max(o,e)}l=255/o}else{let t=255;"s8"===n?(r=-128,t=127):"u16"===n?t=65535:"s16"===n?(r=-32768,t=32767):"u32"===n?t=4294967295:"s32"===n?(r=-2147483648,t=2147483647):"f32"===n?(r=-34e38,t=34e38):"f64"===n&&(r=-Number.MAX_VALUE,t=Number.MAX_VALUE),l=255/(t-r)}const c=new Uint32Array(t),f=this.width*this.height;let u,p,x,g,d;if(u=p=x=e[0],u.length!==f)return a.Z.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(p=e[1],e.length>=3&&(x=e[2]),(0,h.pC)(i)&&i.length===f)for(g=0;g<f;g++)i[g]&&(c[g]=255<<24|(x[g]-r)*l<<16|(p[g]-r)*l<<8|(u[g]-r)*l);else for(g=0;g<f;g++)c[g]=255<<24|(x[g]-r)*l<<16|(p[g]-r)*l<<8|(u[g]-r)*l;else if((0,h.pC)(i)&&i.length===f)for(g=0;g<f;g++)d=(u[g]-r)*l,i[g]&&(c[g]=255<<24|d<<16|d<<8|d);else for(g=0;g<f;g++)d=(u[g]-r)*l,c[g]=255<<24|d<<16|d<<8|d}_fillFrom32Bit(t){const{pixels:e,mask:i}=this;if(!t||!e||!e.length)return a.Z.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let s,n,l,r;s=n=l=e[0],e.length>=3?(n=e[1],l=e[2]):2===e.length&&(n=e[1]);const o=this.width*this.height;if(s.length!==o)return a.Z.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let c=0;if((0,h.pC)(i)&&i.length===o)for(r=0;r<o;r++)t[c++]=s[r],t[c++]=n[r],t[c++]=l[r],t[c++]=1&i[r];else for(r=0;r<o;r++)t[c++]=s[r],t[c++]=n[r],t[c++]=l[r],t[c++]=1}_calculateBandStatistics(t,e){let i=1/0,s=-1/0;const n=t.length;let l,r=0;if((0,h.pC)(e))for(l=0;l<n;l++)e[l]&&(r=t[l],i=r<i?r:i,s=r>s?r:s);else for(l=0;l<n;l++)r=t[l],i=r<i?r:i,s=r>s?r:s;return new p(i,s)}};(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"width",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"height",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"pixelType",void 0),(0,n._)([(0,f.p)("pixelType")],x.prototype,"castPixelType",null),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"validPixelCount",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"mask",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"maskIsAlpha",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"pixels",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"statistics",void 0),x=s=(0,n._)([(0,u.j)("esri.layers.support.PixelBlock")],x);const g=x},31329:(t,e,i)=>{i.d(e,{CD:()=>n,DX:()=>s,Gd:()=>c,Kh:()=>b,Pz:()=>f,Qh:()=>W,SJ:()=>u,Uk:()=>G,Vl:()=>F,XV:()=>p,a2:()=>d,nA:()=>C,nk:()=>a,oB:()=>A,pW:()=>U,qF:()=>h,sS:()=>k,us:()=>T,zp:()=>g});var s,n,l,r=i(61681),o=i(16984);function a(t){return(0,r.pC)(t)&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0}function h(t,e){if(!e?.length||!a(t))return t;const i=t.pixels.length;return e&&e.some((t=>t>=i))||1===i&&1===e.length&&0===e[0]?t:i!==e.length||e.some(((t,e)=>t!==e))?new o.Z({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:e.map((e=>t.pixels[e])),statistics:t.statistics&&e.map((e=>t.statistics[e]))}):t}function c(t){if(!t?.length||t.some((t=>!a(t))))return null;if(1===t.length)return(0,r.pC)(t[0])?t[0].clone():null;const e=t,{width:i,height:s,pixelType:n}=e[0];if(e.some((t=>t.width!==i||t.height!==s)))return null;const l=e.map((({mask:t})=>t)).filter((t=>null!=t));let h=null;l.length&&(h=new Uint8Array(i*s),h.set(l[0]),l.length>1&&w(l.slice(1),h));const c=[];e.forEach((({pixels:t})=>c.push(...t)));const f=e.map((({statistics:t})=>t)).filter((t=>t?.length)),u=[];return f.forEach((t=>u.push(...t))),new o.Z({pixelType:n,width:i,height:s,mask:h,pixels:c,statistics:u.length?u:null})}function f(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const i=e.sort(((t,e)=>t[0]-e[0]));let s=0;i[0][0]<0&&(s=i[0][0]);const n=Math.max(256,i[i.length-1][0]-s+1),l=new Uint8Array(4*n),r=[];let o,a=0,h=0;const c=5===i[0].length;if(n>65536)return i.forEach((t=>{r[t[0]-s]=c?t.slice(1):t.slice(1).concat([255])})),{indexed2DColormap:r,offset:s,alphaSpecified:c};if(t.fillUnspecified)for(o=i[h],a=o[0]-s;a<n;a++)l[4*a]=o[1],l[4*a+1]=o[2],l[4*a+2]=o[3],l[4*a+3]=c?o[4]:255,a===o[0]-s&&(o=h===i.length-1?o:i[++h]);else for(a=0;a<i.length;a++)o=i[a],h=4*(o[0]-s),l[h]=o[1],l[h+1]=o[2],l[h+2]=o[3],l[h+3]=c?o[4]:255;return{indexedColormap:l,offset:s,alphaSpecified:c}}function u(t,e){if(!a(t))return t;if(!e||!e.indexedColormap&&!e.indexed2DColormap)return t;const i=t.clone(),s=i.pixels;let n=i.mask;const l=i.width*i.height;if(1!==s.length)return t;const{indexedColormap:o,indexed2DColormap:h,offset:c,alphaSpecified:f}=e;let u=0;const p=s[0],x=new Uint8Array(p.length),g=new Uint8Array(p.length),d=new Uint8Array(p.length);let m,y=0;if(o){const t=o.length-1;if((0,r.pC)(n))for(u=0;u<l;u++)n[u]&&(y=4*(p[u]-c),y<c||y>t?n[u]=0:(x[u]=o[y],g[u]=o[y+1],d[u]=o[y+2],n[u]=o[y+3]));else{for(n=new Uint8Array(l),u=0;u<l;u++)y=4*(p[u]-c),y<c||y>t?n[u]=0:(x[u]=o[y],g[u]=o[y+1],d[u]=o[y+2],n[u]=o[y+3]);i.mask=n}}else if(h)if((0,r.pC)(n))for(u=0;u<l;u++)n[u]&&(m=h[p[u]],x[u]=m[0],g[u]=m[1],d[u]=m[2],n[u]=m[3]);else{for(n=new Uint8Array(l),u=0;u<l;u++)m=h[p[u]],x[u]=m[0],g[u]=m[1],d[u]=m[2],n[u]=m[3];i.mask=n}return i.pixels=[x,g,d],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=f,i}function p(t,e){if(!a(t))return null;const{pixels:i,mask:s}=t,n=i.length;let l=e.lut;const{offset:r}=e;l&&1===l[0].length&&(l=i.map((()=>l)));const h=[],c=e.outputPixelType||"u8";for(let t=0;t<n;t++){const e=x(i[t],s,l[t],r||0,c);h.push(e)}const f=new o.Z({width:t.width,height:t.height,pixels:h,mask:s,pixelType:c});return f.updateStatistics(),f}function x(t,e,i,s,n){const l=t.length,r=o.Z.createEmptyBand(n,l);if(e)for(let n=0;n<l;n++)e[n]&&(r[n]=i[t[n]-s]);else for(let e=0;e<l;e++)r[e]=i[t[e]-s];return r}function g(t,e){if(!a(t))return null;const i=t.clone(),{pixels:s}=i,n=i.width*i.height,l=e.length,r=Math.floor(l/2),o=e[Math.floor(r)],h=s[0];let c,f,u,p,x,g,d=!1;const m=new Uint8Array(n),y=new Uint8Array(n),w=new Uint8Array(n);let k=i.mask;const A=4===e[0].mappedColor.length;for(k||(k=new Uint8Array(n),k.fill(A?255:1),i.mask=k),x=0;x<n;x++)if(k[x]){for(c=h[x],d=!1,g=r,f=o,u=0,p=l-1;p-u>1;){if(c===f.value){d=!0;break}c>f.value?u=g:p=g,g=Math.floor((u+p)/2),f=e[Math.floor(g)]}d||(c===e[u].value?(f=e[u],d=!0):c===e[p].value?(f=e[p],d=!0):c<e[u].value?(d=!1,f=null):c>e[u].value&&(c<e[p].value?(f=e[u],d=!0):p===l-1?(d=!1,f=null):(f=e[p],d=!0))),d?(m[x]=f.mappedColor[0],y[x]=f.mappedColor[1],w[x]=f.mappedColor[2],k[x]=f.mappedColor[3]):m[x]=y[x]=w[x]=k[x]=0}return i.pixels=[m,y,w],i.mask=k,i.pixelType="u8",i.maskIsAlpha=A,i}function d(t,e){if(!a(t))return null;const{width:i,height:s}=t,{inputRanges:n,outputValues:l,outputPixelType:r,noDataRanges:h,allowUnmatched:c}=e,f=t.pixels[0],u=o.Z.createEmptyBand(r,f.length);c&&u.set(f);const p=t.mask,x=n.length/2;for(let t=0;t<s;t++)for(let e=0;e<i;e++){const s=t*i+e;if(!p||p[s]){const t=f[s];for(let e=x-1;e>=0;e--)if(t>=n[2*e]&&t<=n[2*e+1]){u[s]=l[e];break}}}let g=p;if(h?.length){g=new Uint8Array(i*s),p&&g.set(p);for(let t=0;t<s;t++)for(let e=0;e<i;e++){const s=t*i+e;if(!p||p[s]){const t=f[s];for(let e=0;e<x;e+=2)if(t>=h[e]&&t<=h[e+1]){u[s]=0,g[s]=0;break}}}}return new o.Z({width:i,height:s,pixelType:r,pixels:[u],mask:g})}function m(t,e,i,s){const n=null!=i&&i.length>=2?new Set(i):null,l=1===i?.length?i[0]:null,r=!!e?.length;for(let i=0;i<t.length;i++)if(s[i]){const o=t[i];if(r){let t=!1;for(let i=0;i<e.length;i+=2)if(o>=e[i]&&o<=e[i+1]){t=!0;break}t||(s[i]=0)}s[i]&&(o===l||n?.has(o))&&(s[i]=0)}}function y(t,e){const i=t[0].length;for(let s=0;s<i;s++)if(e[s]){let i=!1;for(let e=0;e<t.length;e++)if(t[e][s]){i=!0;break}i||(e[s]=0)}}function w(t,e){const i=t[0].length;for(let s=0;s<i;s++)if(e[s]){let i=!1;for(let e=0;e<t.length;e++)if(0===t[e][s]){i=!0;break}i&&(e[s]=0)}}function k(t,e){if(!a(t))return null;const{width:i,height:s,pixels:n}=t,l=i*s,r=new Uint8Array(l);t.mask?r.set(t.mask):r.fill(255);const h=n.length,{includedRanges:c,noDataValues:f,outputPixelType:u,matchAll:p,lookup:g}=e;if(g){const t=[];for(let e=0;e<h;e++){const i=x(n[e],r,g.lut,g.offset||0,"u8");t.push(i)}1===t.length?r.set(t[0]):p?y(t,r):w(t,r)}else if(p){const t=[];for(let e=0;e<h;e++){const i=new Uint8Array(l);i.set(r),m(n[e],c,f,i),t.push(i)}1===t.length?r.set(t[0]):y(t,r)}else for(let t=0;t<h;t++)m(n[t],c,f,r);return new o.Z({width:i,height:s,pixelType:u,pixels:n,mask:r})}function A(t,e,i){if("u8"!==t&&"s8"!==t&&"u16"!==t&&"s16"!==t)return null;const s=t.includes("16")?65536:256,n=t.includes("s")?-s/2:0,l=o.Z.createEmptyBand(t,s);for(let t=0;t<e.length;t++){const s=i[t],r=Math.ceil(e[2*t]-n),o=Math.floor(e[2*t+1]-n);for(let t=r;t<=o;t++)l[t]=s}return{lut:l,offset:n}}function C(t,e,i){if("u8"!==t&&"s8"!==t&&"u16"!==t&&"s16"!==t)return null;const s=t.includes("16")?65536:256,n=t.includes("s")?-s/2:0,l=new Uint8Array(s);if(e)for(let t=0;t<e.length;t++){const i=Math.ceil(e[2*t]-n),s=Math.floor(e[2*t+1]-n);for(let t=i;t<=s;t++)l[t]=255}if(i)for(let t=0;t<i.length;t++)l[i[t]-n]=0;return{lut:l,offset:n}}function b(t,e){if(!t||0===t.length)return null;const i=t.find((t=>t.pixelBlock));if(!i||(0,r.Wi)(i.pixelBlock))return null;const s=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,n=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,l=.01*Math.min(s,n),o=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>l?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>l?t.extent.xmin-e.extent.xmin:0)),a=Math.min.apply(null,o.map((t=>t.extent.xmin))),h=Math.min.apply(null,o.map((t=>t.extent.ymin))),c=Math.max.apply(null,o.map((t=>t.extent.xmax))),f=Math.max.apply(null,o.map((t=>t.extent.ymax))),u={x:Math.round((e.xmin-a)/s),y:Math.round((f-e.ymax)/n)},p={width:Math.round((c-a)/s),height:Math.round((f-h)/n)},x={width:Math.round((e.xmax-e.xmin)/s),height:Math.round((e.ymax-e.ymin)/n)};return Math.round(p.width/i.pixelBlock.width)*Math.round(p.height/i.pixelBlock.height)!==o.length||u.x<0||u.y<0||p.width<x.width||p.height<x.height?null:{extent:e,pixelBlock:T(o.map((t=>t.pixelBlock)),p,{clipOffset:u,clipSize:x})}}function M(t,e,i,s,n,l){const{width:r,height:o}=i.block,{x:a,y:h}=i.offset,{width:c,height:f}=i.mosaic,u=function(t,e,i,s,n,l,r,o){return{xmin:n<=i*t?0:n<i*t+t?n-i*t:t,ymin:l<=s*e?0:l<s*e+e?l-s*e:e,xmax:n+r<=i*t?0:n+r<i*t+t?n+r-i*t:t,ymax:l+o<=s*e?0:l+o<s*e+e?l+o-s*e:e}}(r,o,s,n,a,h,c,f);let p=0,x=0;if(l){const t=l.hasGCSSShiftTransform?360:l.halfWorldWidth??0,e=r*l.resolutionX,i=l.startX+s*e;i<t&&i+e>t?x=l.rightPadding:i>=t&&(p=l.leftMargin-l.rightPadding,x=0)}if(u.xmax-=x,"number"!=typeof e)for(let i=u.ymin;i<u.ymax;i++){const l=(n*o+i-h)*c+(s*r-a)+p,f=i*r;for(let i=u.xmin;i<u.xmax;i++)t[l+i]=e[f+i]}else for(let i=u.ymin;i<u.ymax;i++){const l=(n*o+i-h)*c+(s*r-a)+p;for(let i=u.xmin;i<u.xmax;i++)t[l+i]=e}}function T(t,e,i={}){const{clipOffset:s,clipSize:n,alignmentInfo:l,blockWidths:h}=i;if(h)return function(t,e,i){const s=t.find((t=>(0,r.pC)(t)));if((0,r.Wi)(s))return null;const n=t.some((t=>!(0,r.pC)(t)||!!t.mask)),{width:l,height:h}=e,c=n?new Uint8Array(l*h):null,{blockWidths:f}=i,u=[],p=s.getPlaneCount(),x=o.Z.getPixelArrayConstructor(s.pixelType);if(n)for(let e=0,i=0;e<t.length;i+=f[e],e++){const s=t[e];if(!a(s))continue;const n=(0,r.Wg)(s.mask);for(let t=0;t<h;t++)for(let r=0;r<f[e];r++)c[t*l+r+i]=null==n?255:n[t*s.width+r]}for(let e=0;e<p;e++){const i=new x(l*h);for(let s=0,n=0;s<t.length;n+=f[s],s++){const r=t[s];if(!a(r))continue;const o=r.pixels[e];if(null!=o)for(let t=0;t<h;t++)for(let e=0;e<f[s];e++)i[t*l+e+n]=o[t*r.width+e]}u.push(i)}const g=new o.Z({width:l,height:h,mask:c,pixels:u,pixelType:s.pixelType});return g.updateStatistics(),g}(t,e,{blockWidths:h});const c=t.find((t=>a(t)));if((0,r.Wi)(c))return null;const f=n?n.width:e.width,u=n?n.height:e.height,p=c.width,x=c.height,g=e.width/p,d=e.height/x,m={offset:s||{x:0,y:0},mosaic:n||e,block:{width:p,height:x}},y=c.pixelType,w=o.Z.getPixelArrayConstructor(y),k=c.pixels.length,A=[];let C,b,T;for(let e=0;e<k;e++){b=new w(f*u);for(let i=0;i<d;i++)for(let s=0;s<g;s++){const n=t[i*g+s];a(n)&&(C=n.pixels[e],M(b,C,m,s,i,l))}A.push(b)}if(t.some((t=>(0,r.Wi)(t)||(0,r.pC)(t.mask)&&t.mask.length>0))){T=new Uint8Array(f*u);for(let e=0;e<d;e++)for(let i=0;i<g;i++){const s=t[e*g+i],n=(0,r.pC)(s)?s.mask:null;(0,r.pC)(n)?M(T,n,m,i,e,l):M(T,s?1:0,m,i,e,l)}}const U=new o.Z({width:f,height:u,pixels:A,pixelType:y,mask:T});return U.updateStatistics(),U}function U(t,e,i){if(!a(t))return null;const{width:s,height:n}=t,l=e.x,r=e.y,o=i.width+l,h=i.height+r;if(l<0||r<0||o>s||h>n)return t;if(0===l&&0===r&&o===s&&h===n)return t;t.mask||(t.mask=new Uint8Array(s*n));const c=t.mask;for(let t=0;t<n;t++){const e=t*s;for(let i=0;i<s;i++)c[e+i]=t<r||t>=h||i<l||i>=o?0:1}return t.updateStatistics(),t}function B(t){if(!a(t))return null;const e=t.clone(),{width:i,height:s,pixels:n}=t,l=n[0],o=e.pixels[0],h=(0,r.Wg)(t.mask);for(let t=2;t<s-1;t++){const e=new Map;for(let s=t-2;s<t+2;s++)for(let t=0;t<4;t++){const n=s*i+t;P(e,l[n],h?h[n]:1)}o[t*i]=v(e),o[t*i+1]=o[t*i+2]=o[t*i];let s=3;for(;s<i-1;s++){let n=(t-2)*i+s+1;P(e,l[n],h?h[n]:1),n=(t-1)*i+s+1,P(e,l[n],h?h[n]:1),n=t*i+s+1,P(e,l[n],h?h[n]:1),n=(t+1)*i+s+1,P(e,l[n],h?h[n]:1),n=(t-2)*i+s-3,_(e,l[n],h?h[n]:1),n=(t-1)*i+s-3,_(e,l[n],h?h[n]:1),n=t*i+s-3,_(e,l[n],h?h[n]:1),n=(t+1)*i+s-3,_(e,l[n],h?h[n]:1),o[t*i+s]=v(e)}o[t*i+s+1]=o[t*i+s]}for(let t=0;t<i;t++)o[t]=o[i+t]=o[2*i+t],o[(s-1)*i+t]=o[(s-2)*i+t];return e.updateStatistics(),e}function v(t){if(0===t.size)return 0;let e=0,i=-1,s=0;const n=t.keys();let l=n.next();for(;!l.done;)s=t.get(l.value),s>e&&(i=l.value,e=s),l=n.next();return i}function _(t,e,i){if(0===i)return;const s=t.get(e);1===s?t.delete(e):t.set(e,s-1)}function P(t,e,i){0!==i&&t.set(e,t.has(e)?t.get(e)+1:1)}function Z(t,e,i){let{x:s,y:n}=e;const{width:l,height:h}=i;if(0===s&&0===n&&h===t.height&&l===t.width)return t;const{width:c,height:f}=t,u=Math.max(0,n),p=Math.max(0,s),x=Math.min(s+l,c),g=Math.min(n+h,f);if(x<0||g<0||!a(t))return null;s=Math.max(0,-s),n=Math.max(0,-n);const{pixels:d}=t,m=l*h,y=d.length,w=[];for(let e=0;e<y;e++){const i=d[e],r=o.Z.createEmptyBand(t.pixelType,m);for(let t=u;t<g;t++){const e=t*c;let o=(t+n-u)*l+s;for(let t=p;t<x;t++)r[o++]=i[e+t]}w.push(r)}const k=new Uint8Array(m),A=(0,r.Wg)(t.mask);for(let t=u;t<g;t++){const e=t*c;let i=(t+n-u)*l+s;for(let t=p;t<x;t++)k[i++]=A?A[e+t]:1}const C=new o.Z({width:i.width,height:i.height,pixelType:t.pixelType,pixels:w,mask:k});return C.updateStatistics(),C}function S(t,e=!0){if(!a(t))return null;const{pixels:i,width:s,height:n,mask:l,pixelType:h}=t,c=[],f=Math.round(s/2),u=Math.round(n/2),p=n-1,x=s-1;for(let t=0;t<i.length;t++){const l=i[t],r=o.Z.createEmptyBand(h,f*u);let a=0;for(let t=0;t<n;t+=2)for(let i=0;i<s;i+=2){const n=l[t*s+i];if(e){const e=i===x?n:l[t*s+i+1],o=t===p?n:l[t*s+i+s],h=i===x?o:t===p?e:l[t*s+i+s+1];r[a++]=(n+e+o+h)/4}else r[a++]=n}c.push(r)}let g=null;if((0,r.pC)(l)){g=new Uint8Array(f*u);let t=0;for(let i=0;i<n;i+=2)for(let n=0;n<s;n+=2){const r=l[i*s+n];if(e){const e=n===x?r:l[i*s+n+1],o=i===p?r:l[i*s+n+s],a=n===x?o:i===p?e:l[i*s+n+s+1];g[t++]=r*e*o*a?1:0}else g[t++]=r}}return new o.Z({width:f,height:u,pixelType:h,pixels:c,mask:g})}function F(t,e,i){if(!a(t))return null;const{width:s,height:n}=e;let{width:l,height:r}=t;const o=new Map,h={x:0,y:0},c=null==i?1:1+i;let f=t;for(let t=0;t<c;t++){const i=Math.ceil(l/s),a=Math.ceil(r/n);for(let l=0;l<a;l++){h.y=l*n;for(let n=0;n<i;n++){h.x=n*s;const i=Z(f,h,e);o.set(`${t}/${l}/${n}`,i)}}t<c-1&&(f=S(f)),l=Math.round(l/2),r=Math.round(r/2)}return o}function R(t,e,i,s,n=.5){const{width:l,height:r}=t,{width:o,height:a}=e,h=s.cols,c=s.rows,f=Math.ceil(o/h-.1/h),u=Math.ceil(a/c-.1/c);let p,x,g,d,m,y,w;const k=f*h,A=k*u*c,C=new Float32Array(A),b=new Float32Array(A),M=new Uint32Array(A),T=new Uint32Array(A);let U,B,v=0;for(let t=0;t<u;t++)for(let e=0;e<f;e++){p=12*(t*f+e),x=i[p],g=i[p+1],d=i[p+2],m=i[p+3],y=i[p+4],w=i[p+5];for(let i=0;i<c;i++){v=(t*c+i)*k+e*h,B=(i+.5)/c;for(let t=0;t<i;t++)U=(t+.5)/h,C[v+t]=(x*U+g*B+d)*l-n,b[v+t]=(m*U+y*B+w)*r-n,M[v+t]=Math.round(C[v+t]),T[v+t]=Math.round(b[v+t])}p+=6,x=i[p],g=i[p+1],d=i[p+2],m=i[p+3],y=i[p+4],w=i[p+5];for(let i=0;i<c;i++){v=(t*c+i)*k+e*h,B=(i+.5)/c;for(let t=i;t<h;t++)U=(t+.5)/h,C[v+t]=(x*U+g*B+d)*l-n,b[v+t]=(m*U+y*B+w)*r-n,M[v+t]=Math.round(C[v+t]),T[v+t]=Math.round(b[v+t])}}return{offsets_x:C,offsets_y:b,offsets_xi:M,offsets_yi:T,gridWidth:k}}function W(t,e){const{coefficients:i,spacing:s}=e,{offsets_x:n,offsets_y:l,gridWidth:r}=R(t,t,i,{rows:s[0],cols:s[1]},.5),{width:o,height:a}=t,h=new Float32Array(o*a),c=180/Math.PI;for(let t=0;t<a;t++)for(let e=0;e<o;e++){const i=t*r+e,s=0===t?i:i-r,f=t===a-1?i:i+r,u=n[s]-n[f],p=l[f]-l[s];if(isNaN(u)||isNaN(p))h[t*o+e]=90;else{let i=Math.atan2(p,u)*c;i=(360+i)%360,h[t*o+e]=i}}return h}function G(t,e,i,s,n="nearest"){if(!a(t))return null;"majority"===n&&(t=B(t));const{pixels:l,mask:h,pixelType:c}=t,f=t.width,u=t.height,p=o.Z.getPixelArrayConstructor(c),x=l.length,{width:g,height:d}=e;let m=!1;for(let t=0;t<i.length;t+=3)-1===i[t]&&-1===i[t+1]&&-1===i[t+2]&&(m=!0);const{offsets_x:y,offsets_y:w,offsets_xi:k,offsets_yi:A,gridWidth:C}=R({width:f,height:u},e,i,s,"majority"===n?0:.5);let b;const M=(t,e,i)=>{const s=t instanceof Float32Array||t instanceof Float64Array?0:.5;for(let n=0;n<d;n++){b=n*C;for(let l=0;l<g;l++){if(y[b]<0||w[b]<0)t[n*g+l]=0;else if(i)t[n*g+l]=e[k[b]+A[b]*f];else{const i=Math.floor(y[b]),r=Math.floor(w[b]),o=Math.ceil(y[b]),a=Math.ceil(w[b]),c=y[b]-i,u=w[b]-r;if(!h||h[i+r*f]&&h[i+r*f]&&h[i+a*f]&&h[o+a*f]){const h=(1-c)*e[i+r*f]+c*e[o+r*f],p=(1-c)*e[i+a*f]+c*e[o+a*f];t[n*g+l]=(1-u)*h+u*p+s}else t[n*g+l]=e[k[b]+A[b]*f]}b++}}},T=[];let U;for(let t=0;t<x;t++)U=new p(g*d),M(U,l[t],"nearest"===n||"majority"===n),T.push(U);const v=new o.Z({width:g,height:d,pixelType:c,pixels:T});if((0,r.pC)(h))v.mask=new Uint8Array(g*d),M(v.mask,h,!0);else if(m){v.mask=new Uint8Array(g*d);for(let t=0;t<g*d;t++)v.mask[t]=y[t]<0||w[t]<0?0:1}return v.updateStatistics(),v}(l=s||(s={}))[l.matchAny=0]="matchAny",l[l.matchAll=1]="matchAll",function(t){t[t.bestMatch=0]="bestMatch",t[t.fail=1]="fail"}(n||(n={}))}}]);