"use strict";(self.webpackChunkarcgis_webpack01=self.webpackChunkarcgis_webpack01||[]).push([[5171],{45171:(e,t,r)=>{r.r(t),r.d(t,{default:()=>E});var i=r(36663),s=r(66341),a=r(70375),o=r(13802),n=r(61681),l=r(15842),h=r(78668),d=r(3466),c=r(81977),p=r(7753),u=(r(39994),r(7283),r(34248)),y=r(40266),_=r(64307),v=r(38481),m=r(89993),g=r(87232),f=r(43330),w=r(18241),b=r(51599),C=r(23148),k=r(47109);const S=o.Z.getLogger("esri.core.workers.WorkerHandle");class T{constructor(e,t,r,i,s={}){this._mainMethod=t,this._transferLists=r,this._listeners=[],this._promise=(0,k.bA)(e,{...s,schedule:i}).then((e=>{if(void 0===this._thread){this._thread=e,this._promise=null,s.hasInitialize&&this.broadcast({},"initialize");for(const e of this._listeners)this._connectListener(e)}else e.close()})),this._promise.catch((t=>S.error(`Failed to initialize ${e} worker: ${t}`)))}on(e,t){const r={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(r),this._connectListener(r),(0,C.kB)((()=>{r.removed=!0,(0,p.Od)(this._listeners,r),this._thread&&(0,n.pC)(r.threadHandle)&&r.threadHandle.remove()}))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,r){if(this._thread){const i=this._transferLists[e],s=i?i(t):[];return this._thread.invoke(e,t,{transferList:s,signal:r})}return this._promise?this._promise.then((()=>((0,h.k_)(r),this.invokeMethod(e,t,r)))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then((t=>{e.removed||(e.threadHandle=t)}))}}class L extends T{constructor(e=null){super("LercWorker","_decode",{_decode:e=>[e.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,r){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},r):Promise.resolve(null)}release(){--this.ref<=0&&(x.forEach(((e,t)=>{e===this&&x.delete(t)})),this.destroy())}}const x=new Map,I=o.Z.getLogger("esri.layers.ElevationLayer");let D=class extends((0,m.Z)((0,g.Y)((0,f.q)((0,w.I)((0,l.R)(v.Z)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=function(e=null){let t=x.get((0,n.Wg)(e));return t||((0,n.pC)(e)?(t=new L((t=>e.schedule(t))),x.set(e,t)):(t=new L,x.set(null,t))),++t.ref,t}()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this._lercDecoder=(0,n.RY)(this._lercDecoder)}set minScale(e){this.constructed&&I.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`)}get minScale(){}set maxScale(e){this.constructed&&I.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`)}get maxScale(){}readVersion(e,t){let r=t.currentVersion;return r||(r=9.3),r}load(e){const t=(0,n.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new a.Z("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(h.r9).then((()=>this._fetchImageService(t)))),Promise.resolve(this)}fetchTile(e,t,r,i){const a=(0,n.pC)((i=i||{signal:null}).signal)?i.signal:i.signal=(new AbortController).signal,o={responseType:"array-buffer",signal:a},l={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,r,i))).then((()=>(0,s.default)(this.getTileUrl(e,t,r),o))).then((e=>this._lercDecoder.decode(e.data,l,a))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,t,r){const i=!this.tilemapCache&&this.supportsBlankTile,s=(0,d.B7)({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${r}${s?"?"+s:""}`}async queryElevation(e,t){const{ElevationQuery:i}=await r.e(6646).then(r.bind(r,86646));return(0,h.k_)(t),(new i).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:i}=await r.e(6646).then(r.bind(r,86646));return(0,h.k_)(t),(new i).createSampler(this,e,t)}_fetchTileAvailability(e,t,r,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,r,i):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},r=await(0,s.default)(this.parsedUrl.path,t);r.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};(0,i._)([(0,c.Cb)({json:{read:{source:"copyrightText"}}})],D.prototype,"copyright",void 0),(0,i._)([(0,c.Cb)({readOnly:!0,type:_.Z})],D.prototype,"heightModelInfo",void 0),(0,i._)([(0,c.Cb)({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],D.prototype,"path",void 0),(0,i._)([(0,c.Cb)({type:["show","hide"]})],D.prototype,"listMode",void 0),(0,i._)([(0,c.Cb)({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],D.prototype,"minScale",null),(0,i._)([(0,c.Cb)({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],D.prototype,"maxScale",null),(0,i._)([(0,c.Cb)({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],D.prototype,"opacity",void 0),(0,i._)([(0,c.Cb)({type:["ArcGISTiledElevationServiceLayer"]})],D.prototype,"operationalLayerType",void 0),(0,i._)([(0,c.Cb)()],D.prototype,"sourceJSON",void 0),(0,i._)([(0,c.Cb)({json:{read:!1},value:"elevation",readOnly:!0})],D.prototype,"type",void 0),(0,i._)([(0,c.Cb)(b.HQ)],D.prototype,"url",void 0),(0,i._)([(0,c.Cb)()],D.prototype,"version",void 0),(0,i._)([(0,u.r)("version",["currentVersion"])],D.prototype,"readVersion",null),D=(0,i._)([(0,y.j)("esri.layers.ElevationLayer")],D),D.prototype.fetchTile.__isDefault__=!0;const E=D}}]);