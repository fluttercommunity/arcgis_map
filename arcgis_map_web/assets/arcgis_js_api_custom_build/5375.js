"use strict";(self.webpackChunkarcgis_webpack01=self.webpackChunkarcgis_webpack01||[]).push([[5375],{5375:(e,t,r)=>{r.r(t),r.d(t,{getGeometryServiceURL:()=>w,projectGeometry:()=>S});var o=r(51366),n=r(70375),i=r(26869),a=r(66341),s=r(7283),c=r(53736),l=r(84238),u=r(36663),f=r(82064),p=r(81977),m=(r(7753),r(39994),r(40266));let g=class extends f.wq{constructor(e){super(e),this.geometries=null,this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map((e=>e.toJSON())),t=this.geometries[0],r={};return r.outSR=this.outSpatialReference.wkid||JSON.stringify(this.outSpatialReference.toJSON()),r.inSR=t.spatialReference.wkid||JSON.stringify(t.spatialReference.toJSON()),r.geometries=JSON.stringify({geometryType:(0,c.Ji)(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),null!=this.transformForward&&(r.transformForward=this.transformForward),r}};(0,u._)([(0,p.Cb)()],g.prototype,"geometries",void 0),(0,u._)([(0,p.Cb)({json:{read:{source:"outSR"}}})],g.prototype,"outSpatialReference",void 0),(0,u._)([(0,p.Cb)()],g.prototype,"transformation",void 0),(0,u._)([(0,p.Cb)()],g.prototype,"transformForward",void 0),g=(0,u._)([(0,m.j)("esri.rest.support.ProjectParameters")],g);const y=g,h=(0,s.se)(y);async function w(e=null,t){if(o.Z.geometryServiceUrl)return o.Z.geometryServiceUrl;if(!e)throw new n.Z("internal:geometry-service-url-not-configured");let r;r="portal"in e?e.portal||i.Z.getDefault():e,await r.load({signal:t});const a=r.helperServices?.geometry?.url;if(!a)throw new n.Z("internal:geometry-service-url-not-configured");return a}async function S(e,t,r=null,o){const i=await w(r,o),s=new y;s.geometries=[e],s.outSpatialReference=t;const u=await async function(e,t,r){t=h(t);const o=(0,l.en)(e),n={...o.query,f:"json",...t.toJSON()},i=t.outSpatialReference,s=(0,c.Ji)(t.geometries[0]),u=(0,l.lA)(n,r);return(0,a.default)(o.path+"/project",u).then((({data:{geometries:e}})=>function(e,t,r){const o=(0,c.q9)(t);return e.map((e=>{const t=o.fromJSON(e);return t.spatialReference=r,t}))}(e,s,i)))}(i,s,{signal:o});if(u&&Array.isArray(u)&&1===u.length)return u[0];throw new n.Z("internal:geometry-service-projection-failed")}}}]);